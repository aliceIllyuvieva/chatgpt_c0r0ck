import logging
import openai
from aiogram import Bot, Dispatcher, executor, types

openai.api_key = "api_key"

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token="bot_token")
dp = Dispatcher(bot)


async def ai(prompt):
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Your name is 'Dr. Bot'. You were created in the startup 's0r0k'. You are a qualified medical assistant with extensive knowledge of medical literature, articles and research. Doctors come to you with various questions, and you need to answer them, demonstrating your competence and ability to understand situations. Follow the instructions of the doctors, approach the issues systematically, and think through your plans in detail. Minimize the transformation of information into unnecessary banal phrases. Write in Russian."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=2048,
            top_p=0,
            frequency_penalty=0,
            presence_penalty=0,
        )

        return completion.choices[0].message.content
    except:
        return None


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–æ–∫—Ç–æ—Ä –ë–æ—Ç! –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –û–¥–Ω–∞–∫–æ —è –ø–æ–∫–∞ –µ—â—ë —Ç–æ–ª—å–∫–æ —É—á—É—Å—å, –ø–æ—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ —Å–ª–∞–±—ã–º–∏, –Ω–æ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –≤—Å—ë —É–º–Ω–µ–µ, –∏ —É–∂–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–µ—Å—è—Ü–µ–≤ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Å –∫–∞–∂–¥—ã–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–º. \n\n–í—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∫ –æ –º–µ–¥–∏—Ü–∏–Ω–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ, —Ç–∞–∫ –∏ –æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏–ª–∏ –±–∏–∑–Ω–µ—Å–µ. \n–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—á—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑, –∏–ª–∏ –ø–æ–º–æ—á—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é –ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å –≤ —á—ë–º —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ –≤—Ä–∞—á–∞ –∏–ª–∏ –∫–∞–∫ –∫–ª–∏–Ω–∏–∫–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ. \n–ß–µ–º –ª—É—á—à–µ –≤—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ª—É—á—à–µ —è —Å–º–æ–≥—É –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –í —Ü–µ–ª–æ–º –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, —á–µ–º –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ, —Ç–µ–º —É–º–Ω–µ–µ —Å—Ç–∞–Ω—É —è, –∏ —Ç–µ–º –º—É–¥—Ä–µ–µ —Å—Ç–∞–Ω–µ—Ç–µ –≤—ã. \n\n–ê, —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ ‚Äî —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/+0Mxt6K0y83M3MmIy \n\n–û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: –î–æ–∫—Ç–æ—Ä –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ö–æ–¥–æ–º –±–µ—Å–µ–¥—ã. –ó–∞–¥–∞–≤–∞–π—Ç–µ –µ–º—É –≤–µ—Å—å –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é. \n–ú—ã –±—É–¥–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –î–æ–∫—Ç–æ—Ä–∞ –ë–æ—Ç–∞ –≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º. –ê —Ç–∞–∫–∂–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: –ø–∏—à–∏—Ç–µ @c0r0ck")



@dp.message_handler()
async def echo(message: types.Message):
    answer = await ai(message.text)

    if answer != None:
        await message.reply(answer)
    else:
        await message.reply('üòû –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –î–æ–∫—Ç–æ—Ä—É –ë–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @c0r0ck')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
